package fr.openwide.alfresco.repo.wsgenerator.processor;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

import javax.annotation.processing.Filer;
import javax.lang.model.SourceVersion;
import javax.tools.JavaFileObject;

import org.alfresco.repo.dictionary.M2Aspect;
import org.alfresco.repo.dictionary.M2Class;
import org.alfresco.repo.dictionary.M2ClassAssociation;
import org.alfresco.repo.dictionary.M2Model;
import org.alfresco.repo.dictionary.M2Namespace;
import org.alfresco.repo.dictionary.M2Property;
import org.alfresco.repo.dictionary.M2Type;
import org.apache.commons.lang3.StringUtils;
import org.jibx.runtime.impl.IXMLReaderFactory;

import fr.openwide.alfresco.repo.wsgenerator.annotation.GenerateJavaModel;

public class JavaModelGenerator {

	public void generate(GenerateJavaModel generateJavaModel, String packageName, String modelPath, Filer filer) {
		try {
			M2Model model = loadModel(modelPath, filer);
			
			for (M2Namespace namespace : model.getNamespaces()) {
				String javaRootInterfaceName = StringUtils.capitalize(namespace.getPrefix()) + "Model";
				String namespacePackage = packageName + "." + toJavaName(namespace.getPrefix());
				
				JavaFileObject javaRootInterface = filer.createSourceFile(packageName + "." + javaRootInterfaceName);
				try (Writer writer = javaRootInterface.openWriter()) {
					writer.append("// Generated by Owsi-Alfresco @GenerateJavaModel for ").append(modelPath).append("\n\n");
					writer.append("package ").append(packageName).append(";\n\n");
					
					Set<String> classesToImport = new TreeSet<>();
					classesToImport.add("fr.openwide.alfresco.api.core.remote.model.NamespaceReference");
					List<M2Aspect> aspects = new ArrayList<>(model.getAspects());
					sortAspects(aspects);
					
					for (M2Aspect aspect : aspects) {
						if (isSameNameSpace(namespace.getPrefix() + ":", aspect.getName())) {
							classesToImport.add(namespacePackage + "." + getClassName(aspect.getName()));
						}
					}
					for (M2Type type : model.getTypes()) {
						if (isSameNameSpace(namespace.getPrefix() + ":", type.getName())) {
							classesToImport.add(namespacePackage + "." + getClassName(type.getName()));
						}
					}
					for (String classToImport : classesToImport) {
						writer.append("import ").append(classToImport).append(";\n");
					}
					
					writer.append("\npublic interface ").append(javaRootInterfaceName).append(" {\n\n")
						.append("	NamespaceReference NAMESPACE = NamespaceReference.create(\"")
							.append(namespace.getPrefix()).append("\", \"").append(namespace.getUri()).append("\");\n\n");
					
					for (M2Aspect aspect : aspects) {
						if (isSameNameSpace(namespace.getPrefix() + ":", aspect.getName())) {
							manageClass(generateJavaModel, writer, 
									modelPath, namespacePackage, javaRootInterfaceName, 
									aspect, filer);
						}
					}
					for (M2Type type : model.getTypes()) {
						if (isSameNameSpace(namespace.getPrefix() + ":", type.getName())) {
							manageClass(generateJavaModel, writer, 
									modelPath, namespacePackage, javaRootInterfaceName, 
									type, filer);
						}
					}
					writer.append("}\n");
				}
			}
		} catch (IOException e) {
			throw new IllegalStateException(e);
		}
	}
	
	// Tri les aspects de tel manière que ceux déclaré en mandatory soient initialisé en premier. 
	// Sinon, on se retrouve avec des aspects non encore initialisé lors de leur utilisation.
	private void sortAspects(List<M2Aspect> aspects) {
		Map<Object, M2Aspect> mapName = aspects.stream().collect(Collectors.toMap(aspect -> aspect.getName(), aspect -> aspect));
		Map<String, Integer> mapDepth = aspects.stream().collect(Collectors.toMap(aspect -> aspect.getName(), aspect -> 0));
		aspects.stream().forEach(aspect -> visitAspect(aspect, mapName, mapDepth, 0));
		Collections.sort(aspects, new Comparator<M2Aspect>() {
			@Override
			public int compare(M2Aspect a1, M2Aspect a2) {
				int depth1 = mapDepth.getOrDefault(a1.getName(), 0);
				int depth2 = mapDepth.getOrDefault(a2.getName(), 0);
				return depth2 - depth1;
			}
		});
	}
	private void visitAspect(M2Aspect aspect, Map<Object, M2Aspect> mapName, Map<String, Integer> mapDepth, int actualDepth) {
		int currentDepth = mapDepth.getOrDefault(aspect.getName(), 0);
		if (currentDepth < actualDepth) {
			mapDepth.put(aspect.getName(), actualDepth);
		}
		for (String childAspectName : aspect.getMandatoryAspects()) {
			M2Aspect childAspect = mapName.get(childAspectName);
			if (childAspect != null) {
				visitAspect(childAspect, mapName, mapDepth, currentDepth+1);
			}
		}
	}

	private M2Model loadModel(String modelPath, Filer filer) throws IOException {
		try (InputStream input = getClass().getClassLoader().getResourceAsStream(modelPath)) {
			if (input != null) {
				return loadModel(input);
			}
		}
		
		File moduleFolder = getModuleFolder(filer);
		File modelFile = (modelPath.startsWith("../"))
				? new File(moduleFolder, modelPath)
				: new File(new File(moduleFolder, "src/main/resources/"), modelPath);
		if (! modelFile.exists() && modelPath.startsWith("alfresco/module/")) {
			File configFolder = new File(moduleFolder, "src/main/config");
			String modelPathConfig = StringUtils.substringAfter(modelPath.substring("src/main/resources/".length()), "/");
			File modelFileConfig = new File(configFolder, modelPathConfig);
			if (modelFileConfig.exists()) {
				modelFile = modelFileConfig;
			}
		}
		
		if (! modelFile.exists()) {
			throw new IllegalStateException("Model do not exist " + modelFile.getAbsolutePath());
		}
		
		try (InputStream input = new BufferedInputStream(new FileInputStream(modelFile))) {
			return loadModel(input);
		}
	}
	private M2Model loadModel(InputStream input) {
		ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();
		try {
			Thread.currentThread().setContextClassLoader(IXMLReaderFactory.class.getClassLoader());
			return M2Model.createModel(input);
		} finally {
			Thread.currentThread().setContextClassLoader(oldContextClassLoader);
		}
	}
	
	private File getModuleFolder(Filer filer) throws IOException {
		JavaFileObject fakeObject = filer.createSourceFile("OwsiFakeObject");
		try {
			File fakeFile = new File(fakeObject.toUri().getPath());
			return new File(fakeFile.getParentFile(), "../../..").getCanonicalFile();
		} finally {
			fakeObject.delete();
		}
	}

	private void manageClass(GenerateJavaModel generateJavaModel, Writer javaRootInterfaceWriter, 
			String modelPath, String packageName,
			String javaRootInterfaceName, 
			M2Class m2Class, 
			Filer filer) throws IOException {
		manageClassModel(generateJavaModel, javaRootInterfaceWriter, modelPath, packageName, javaRootInterfaceName, m2Class, filer);
		if (generateJavaModel.useBean()) {
			manageClassBean(generateJavaModel, modelPath, packageName, javaRootInterfaceName, m2Class, filer);
		}
	}

	private void manageClassModel(GenerateJavaModel generateJavaModel, Writer javaRootInterfaceWriter,
			String modelPath, String packageName,
			String javaRootInterfaceName, 
			M2Class m2Class, 
			Filer filer) throws IOException {
		String classPrefix = StringUtils.substringBefore(m2Class.getName(), ":");
		String containerName = StringUtils.substringAfter(m2Class.getName(), ":");
		String className = getClassName(m2Class.getName());
		javaRootInterfaceWriter.append("	").append(className).append(" ").append(toJavaName(containerName)).append(" = new ").append(className).append("();\n");
		
		JavaFileObject classObject = filer.createSourceFile(packageName + "." + className);
		try (Writer writer = classObject.openWriter()) {
			writer.append("// Generated by Owsi-Alfresco @GenerateJavaModel for ").append(modelPath).append("\n\n")
				.append("package ").append(packageName).append(";\n\n");

			Set<String> classesToImport = new TreeSet<>();
			classesToImport.add("org.alfresco.service.namespace.QName");
			classesToImport.add(StringUtils.substringBeforeLast(packageName, ".") + "." + javaRootInterfaceName);
			
			String containerType = (m2Class instanceof M2Aspect) ? "AspectModel" : "TypeModel";
			if (m2Class.getParentName() != null 
				&& classPrefix.equals(StringUtils.substringBefore(m2Class.getParentName(), ":"))) {
				containerType = getClassName(m2Class.getParentName());
			} else {
				classesToImport.add("fr.openwide.alfresco.component.model.node.model." + containerType);
			}
			
			for (M2Property property : m2Class.getProperties()) {
				classesToImport.add("fr.openwide.alfresco.component.model.node.model.property.PropertyModels");
				classesToImport.add("fr.openwide.alfresco.component.model.node.model.property."
						+ (property.isMultiValued() ? "multi.Multi" : "single.")
						+ getModelType(property.getType()) + "PropertyModel ");
			}
			for (M2ClassAssociation assoc : m2Class.getAssociations()) {
				if (assoc.isChild()) {
					classesToImport.add("fr.openwide.alfresco.component.model.node.model.ChildAssociationModel");
				} else {
					classesToImport.add("fr.openwide.alfresco.component.model.node.model.association." + getAssocClassName(assoc));
				}
			}
			for (String classToImport : classesToImport) {
				writer.append("import ").append(classToImport).append(";\n");
			}
				
			writer.append("\npublic class ").append(className).append(" extends ")
					.append(containerType);
			writer.append(" {\n\n")
				.append("	public ").append(className).append("() {\n")
				.append("		super(").append(javaRootInterfaceName).append(".NAMESPACE.createQName(\"").append(containerName).append("\"));\n")
				.append("	}\n\n")
				.append("	protected ").append(className).append("(QName qName) {\n")
				.append("		super(qName);\n")
				.append("	}\n\n");
			if (generateJavaModel.useBean()) {
				writer
					.append("	public ").append(className).append("Bean bean() {\n")
					.append("		return new ").append(className).append("Bean();\n")
					.append("	}\n\n");
			}
			
			for (M2Property property : m2Class.getProperties()) {
				manageProperty(writer, javaRootInterfaceName, property);
			}

			for (M2ClassAssociation assoc : m2Class.getAssociations()) {
				manageAssoc(writer, javaRootInterfaceName, assoc);
			}

			for (String aspect : m2Class.getMandatoryAspects()) {
				// On ne gére que les aspects du même modèle pour le moment.
				if (isSameNameSpace(m2Class.getName(), aspect)) {
					manageMandatoryAspect(writer, javaRootInterfaceName, aspect);
				}
			}
			
			writer.append("}\n");
		}
	}
	
	private void manageClassBean(GenerateJavaModel generateJavaModel, 
			String modelPath, String packageName, String javaRootInterfaceName, 
			M2Class m2Class, Filer filer) throws IOException {
		String classPrefix = StringUtils.substringBefore(m2Class.getName(), ":");
		String containerName = toJavaName(StringUtils.substringAfter(m2Class.getName(), ":"));
		String className = getClassName(m2Class.getName()) + "Bean";
		
		JavaFileObject classObject = filer.createSourceFile(packageName + "." + className);
		try (Writer writer = classObject.openWriter()) {
			writer.append("// Generated by Owsi-Alfresco @GenerateJavaModel for ").append(modelPath).append("\n\n")
				.append("package ").append(packageName).append(";\n\n");
			String typeOrAspect = (m2Class instanceof M2Aspect) ? "Aspect" : "Type";
			String containerType = typeOrAspect + "NodeBean";

			Set<String> classesToImport = new TreeSet<>();
			classesToImport.add(StringUtils.substringBeforeLast(packageName, ".") + "." + javaRootInterfaceName);
			classesToImport.add("fr.openwide.alfresco.component.model.node.model." + typeOrAspect + "Model");
			if (m2Class.getParentName() != null 
				&& classPrefix.equals(StringUtils.substringBefore(m2Class.getParentName(), ":"))) {
				containerType = getClassName(m2Class.getParentName()) + "Bean";
			} else {
				classesToImport.add("fr.openwide.alfresco.component.model.node.model.bean." + containerType);
			}
			if (! m2Class.getProperties().isEmpty()) {
				if (generateJavaModel.useJackson()) {
					classesToImport.add("com.fasterxml.jackson.annotation.JsonProperty");
				}
			}
			for (String aspect : m2Class.getMandatoryAspects()) {
				if (isSameNameSpace(m2Class.getName(), aspect)) {
					classesToImport.add(StringUtils.substringBeforeLast(packageName, ".") + "." + javaRootInterfaceName);
				}
			}
			for (String classToImport : classesToImport) {
				writer.append("import ").append(classToImport).append(";\n");
			}
			
			writer.append("\npublic class ").append(className).append(" extends ").append(containerType).append(" {\n\n")
				.append("	@Override\n")
				.append("	public " + typeOrAspect + "Model get" + typeOrAspect + "Model() {\n")
				.append("		return " + javaRootInterfaceName + "." + containerName + ";\n")
				.append("	}\n\n");
			
			for (M2Property property : m2Class.getProperties()) {
				String propertyJavaName = toJavaName(StringUtils.substringAfter(property.getName(), ":"));
				String propertyPath = javaRootInterfaceName + "." + containerName + "." + propertyJavaName;
				String type = getJavaType(property.getType());
				if (property.isMultiValued()) {
					type = "java.util.List<" + type + ">";
				}
				
				if (generateJavaModel.useJackson()) {
					writer.append("	@JsonProperty(\"").append(property.getName()).append("\")\n");
				}
				
				writer
					.append("	public ").append(type).append(" get").append(StringUtils.capitalize(propertyJavaName)).append("() {\n")
					.append("		return getProperty(").append(propertyPath).append(");\n")
					.append("	}\n")
					.append("	public void set").append(StringUtils.capitalize(propertyJavaName)).append("(").append(type).append(" value) {\n")
					.append("		setProperty(").append(propertyPath).append(", value);\n")
					.append("	}\n")
					.append("	public ").append(className).append(" ").append(propertyJavaName).append("(").append(type).append(" value) {\n")
					.append("		set").append(StringUtils.capitalize(propertyJavaName)).append("(value);\n")
					.append("		return this;\n")
					.append("	}\n")
					.append("	public ").append(className).append(" unset").append(StringUtils.capitalize(propertyJavaName)).append("() {\n")
					.append("		unsetProperty(").append(propertyPath).append(");\n")
					.append("		return this;\n")
					.append("	}\n\n");
			}
			
			for (String aspect : m2Class.getMandatoryAspects()) {
				if (isSameNameSpace(m2Class.getName(), aspect)) {
					String aspectJavaName = toJavaName(StringUtils.substringAfter(aspect, ":"));
					writer
						.append("	public ").append(getClassName(aspect)).append("Bean ").append(aspectJavaName).append("() {\n")
						.append("		return getAspect(").append(javaRootInterfaceName).append(".").append(aspectJavaName).append(".bean());\n")
						.append("	}\n");
				}
			}
			
			writer.append("}\n");
		}
	}
	
	private boolean isSameNameSpace(String name1, String name2) {
		String prefix1 = StringUtils.substringBefore(name1, ":");
		String prefix2 = StringUtils.substringBefore(name2, ":");
		return prefix1.contentEquals(prefix2);
	}
	
	private void manageProperty(Writer writer, String javaRootInterfaceName, M2Property property) throws IOException {
		String name = StringUtils.substringAfter(property.getName(), ":");
		String type = getModelType(property.getType());
		String multi = property.isMultiValued() ? "Multi" : "";
		writer.append("	public final ").append(multi).append(type).append("PropertyModel ").append(toJavaName(name))
			.append(" = PropertyModels.new").append(multi).append(type).append("(this, ").append(javaRootInterfaceName)
			.append(".NAMESPACE, \"").append(name).append("\");\n");
	}

	private void manageAssoc(Writer writer, String javaRootInterfaceName, M2ClassAssociation assoc) throws IOException {
		String name = StringUtils.substringAfter(assoc.getName(), ":");
		String className = getAssocClassName(assoc);
		
		writer.append("	public final ").append(className).append(" ").append(toJavaName(name))
			.append(" = new ").append(className).append("(")
			.append(javaRootInterfaceName).append(".NAMESPACE.createQName(\"").append(name).append("\"));\n");
	}
	private String getAssocClassName(M2ClassAssociation assoc) {
		if (assoc.isChild()) {
			return "ChildAssociationModel";
		}
		return (assoc.isSourceMany() ? "Many" : "One")
			+ "To" + (assoc.isTargetMany() ? "Many" : "One")
			+ "AssociationModel";
	}

	private void manageMandatoryAspect(Writer writer, String javaRootInterfaceName, String aspectName) throws IOException {
		String name = StringUtils.substringAfter(aspectName, ":");
		writer.append("	public final ").append(getClassName(aspectName))
			.append(" ").append(name)
			.append(" = addMandatoryAspect(").append(javaRootInterfaceName)
			.append(".").append(name).append(");\n");
	}

	private String getModelType(String type) {
		switch (type) {
		case "d:int": return "Integer";
		case "d:datetime": return "DateTime";
		case "d:noderef": return "NodeRef";
		case "d:assocref": return "AssociationRef";
		case "d:childassocref": return "ChildAssociationRef";
		case "d:qname": return "QName";
		case "d:category": return "NodeRef";
		case "d:mltext": return "Text";
		case "d:locale": return "Locale";
		}
		return StringUtils.capitalize(StringUtils.substringAfter(type, ":"));
	}

	private String getJavaType(String type) {
		switch (type) {
		case "d:int": return "Integer";
		case "d:date": return "java.util.Date";
		case "d:time": return "java.util.Date";
		case "d:datetime": return "java.util.Date";
		case "d:noderef": return "org.alfresco.service.cmr.repository.NodeRef";
		case "d:assocref": return "org.alfresco.service.cmr.repository.AssociationRef";
		case "d:childassocref": return "org.alfresco.service.cmr.repository.ChildAssociationRef";
		case "d:qname": return "org.alfresco.service.namespace.QName";
		case "d:category": return "org.alfresco.service.cmr.repository.NodeRef";
		case "d:text": return "String";
		case "d:mltext": return "String";
		case "d:locale": return "java.util.Locale";
		case "d:content": return "fr.openwide.alfresco.api.core.node.model.RepositoryContentData";
		case "d:any": return "java.io.Serializable";
		}
		return StringUtils.capitalize(StringUtils.substringAfter(type, ":"));
	}

	private String getClassName(String containerName) {
		String prefix = StringUtils.substringBefore(containerName, ":");
		String name = StringUtils.substringAfter(containerName, ":");
		return toJavaName(StringUtils.capitalize(prefix) + StringUtils.capitalize(name));
	}
	
	private String toJavaName(String s) {
		if (SourceVersion.isKeyword(s)) {
			s = s + "_";
		}
		return s.replace("-", "_");
	}
}
